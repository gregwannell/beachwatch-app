# Task ID: 8
# Title: Create API Routes for Litter Data Analytics
# Status: pending
# Dependencies: 1, 7
# Priority: high
# Description: Build simple Next.js API routes for fetching aggregated litter data following existing app patterns, with basic error handling and caching using Supabase JavaScript client
# Details:
Create basic API routes in app/api/analytics/: /region/[id] for region-specific data, /trends for historical data, /materials and /sources for breakdowns. Follow existing patterns from materials/regions routes. Implement simple Supabase client queries for annual_*_aggregates tables using correct field names: `name_id` for region relationships, `additional_area_cleaned_m` for area calculations, and `aggregate_id` for linking. Use basic Next.js revalidate for caching. Add simple parameter validation and basic error handling. Keep it simple and functional for the 2,288 aggregate rows in the database.

# Test Strategy:
Test API routes with basic filter combinations. Verify responses return correct data using Supabase client. Test simple error handling for invalid requests. Validate data accuracy against database queries.

# Subtasks:
## 1. Create Basic API Route Structure [pending]
### Dependencies: None
### Description: Set up simple API route files following existing app patterns with basic Next.js App Router organization
### Details:
Create API route files in app/api/analytics/: region/[id]/route.ts, trends/route.ts, materials/route.ts, and sources/route.ts. Follow existing patterns from materials and regions routes. Define basic TypeScript interfaces for responses using correct field names: `name_id`, `additional_area_cleaned_m`, and `aggregate_id`. Implement simple GET handlers with basic parameter extraction. Keep structure simple and consistent with existing codebase.

## 2. Implement Basic Supabase Queries [pending]
### Dependencies: 8.1
### Description: Create simple Supabase client queries for fetching data from aggregated tables using correct field names
### Details:
Build straightforward Supabase queries for annual_*_aggregates tables using correct field names: `name_id` for region joins, `additional_area_cleaned_m` for area calculations, and `aggregate_id` for central table linking. Create simple select queries with basic filtering. Follow existing query patterns from the app. Handle region-specific data fetching and basic trend analysis. Keep queries simple and focused on essential functionality.

## 3. Add Basic Parameter Validation and Error Handling [pending]
### Dependencies: 8.1
### Description: Implement simple parameter validation and basic error handling following existing app patterns
### Details:
Add basic parameter validation for region IDs, date ranges, and filter options. Use simple JavaScript validation rather than complex schema libraries. Implement basic error responses with appropriate HTTP status codes. Handle common cases like invalid region IDs and missing parameters. Follow existing error handling patterns from materials/regions routes. Keep validation simple and focused on preventing basic errors.

## 4. Implement Simple Caching with Next.js Revalidate [pending]
### Dependencies: 8.2
### Description: Add basic response caching using Next.js revalidate following existing app caching patterns
### Details:
Implement basic caching using Next.js revalidate with appropriate time intervals for analytics data. Add simple cache headers for browser caching. Follow existing caching patterns from the app. Set reasonable revalidate times based on data update frequency. Keep caching strategy simple and effective for the app's scale with 2,288 aggregate rows.

